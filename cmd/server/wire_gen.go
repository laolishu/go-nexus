// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/laolishu/go-nexus/core/app"
	"github.com/laolishu/go-nexus/internal/handler"
	"github.com/laolishu/go-nexus/internal/repository"
	"github.com/laolishu/go-nexus/internal/repository/dao"
	"github.com/laolishu/go-nexus/internal/repository/impl"
	impl2 "github.com/laolishu/go-nexus/internal/service/impl"
	"github.com/laolishu/go-nexus/pkg/config"
	"github.com/laolishu/go-nexus/pkg/logger"
)

// Injectors from wire.go:

// InitializeApp 初始化整个应用程序
func InitializeApp(configFile2 string) (*app.App, func(), error) {
	configConfig, err := config.LoadConfig(configFile2)
	if err != nil {
		return nil, nil, err
	}
	slogLogger := logger.NewLogger(configConfig)
	db, cleanup, err := repository.NewDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	repositoryDAO := dao.NewRepositoryDAO(slogLogger, db)
	repositoryRepositoryImpl := impl.NewRepositoryRepository(slogLogger, repositoryDAO)
	repositoryServiceImpl := impl2.NewRepositoryService(slogLogger, repositoryRepositoryImpl)
	repositoryHandler := handler.NewRepositoryHandler(slogLogger, repositoryServiceImpl)
	artifactDAO := dao.NewArtifactDAO(slogLogger, db)
	artifactRepositoryImpl := impl.NewArtifactRepository(slogLogger, artifactDAO)
	artifactServiceImpl := impl2.NewArtifactService(slogLogger, artifactRepositoryImpl)
	artifactHandler := handler.NewArtifactHandler(slogLogger, artifactServiceImpl)
	appApp := app.NewApp(configConfig, slogLogger, repositoryHandler, artifactHandler, repositoryServiceImpl, artifactServiceImpl)
	return appApp, func() {
		cleanup()
	}, nil
}
